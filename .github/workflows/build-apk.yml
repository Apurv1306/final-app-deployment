name: Build Android APK

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  workflow_dispatch: # Allows manual trigger from GitHub Actions tab

jobs:
  build_apk:
    runs-on: ubuntu-latest # Use a Linux environment for Buildozer

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9' # Use a Python version compatible with Buildozer and your app

    - name: Install Buildozer and dependencies
      run: |
        sudo apt update --fix-missing
        # Install core build tools including git, autoconf, automake, libtool, pkg-config, libtool-bin
        # Added m4, gettext, patchelf, and a more comprehensive set of OpenCV/scientific computing dependencies
        sudo apt install -y git zip unzip autoconf automake libtool pkg-config libtool-bin build-essential openjdk-11-jdk python3-pip m4 gettext patchelf \
           cmake \
           libpng-dev libjpeg-dev libtiff-dev \
           gfortran \
           libhdf5-dev libhdf5-serial-dev \
           libssl-dev libffi-dev zlib1g-dev libncurses5-dev liblzma-dev \
           libtool # Explicitly install libtool

        pip install --upgrade pip setuptools
        pip install buildozer
        pip install cython

    - name: Configure Buildozer environment variables
      # Buildozer needs to pick up these env vars for the Android build process.
      # We replace placeholders in buildozer.spec with actual secrets.
      run: |
        sed -i "s|__ENV_FACEAPP_EMAIL__|${{ secrets.FACEAPP_EMAIL }}|g" buildozer.spec
        sed -i "s|__ENV_FACEAPP_PASS__|${{ secrets.FACEAPP_PASS }}|g" buildozer.spec
        sed -i "s|__ENV_FACEAPP_ADMIN_EMAIL__|${{ secrets.FACEAPP_ADMIN_EMAIL }}|g" buildozer.spec

    - name: Run libtoolize
      # This step is crucial for fixing 'LT_SYS_SYMBOL_USCORE' errors
      # It ensures libtool's macros are correctly generated and available for autoconf
      run: |
        # Navigate to the python-for-android directory where configure.ac is located
        # This path might vary slightly, but it's usually within .buildozer/android/platform/python-for-android
        # We'll try a common path, if this fails, the exact path from the error log might be needed.
        P4A_DIR=$(find .buildozer/android/platform -name "python-for-android" -type d -print -quit)
        if [ -d "$P4A_DIR" ]; then
          echo "Found python-for-android directory: $P4A_DIR"
          pushd "$P4A_DIR"
          libtoolize --force --copy || echo "libtoolize failed, but continuing build attempt."
          popd
        else
          echo "python-for-android directory not found. Skipping libtoolize."
        fi


    - name: Build Android Debug APK
      run: |
        buildozer android debug
      env:
        # Pass secrets as environment variables to Buildozer command if needed,
        # though `android.env_vars` in buildozer.spec is the primary way for the app itself.
        # This is more for buildozer's internal use if it needs them during compilation.
        FACEAPP_EMAIL: ${{ secrets.FACEAPP_EMAIL }}
        FACEAPP_PASS: ${{ secrets.FACEAPP_PASS }}
        FACEAPP_ADMIN_EMAIL: ${{ secrets.FACEAPP_ADMIN_EMAIL }}

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: faceapp-attendance-apk
        path: bin/*.apk # Path to the generated APK file
